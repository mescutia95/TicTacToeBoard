        -:    0:Source:TicTacToeBoard.cpp
        -:    0:Graph:TicTacToeBoard.gcno
        -:    0:Data:TicTacToeBoard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "TicTacToeBoard.h"
        -:    2:#include <iostream>
        -:    3:using namespace std;
        -:    4:/**
        -:    5: * Class for representing a 3x3 Tic-Tac-Toe game board, using the Piece enum
        -:    6: * to represent the spaces on the board.
        -:    7:**/
        -:    8:
        -:    9://Constructor sets an empty board and specifies it is X's turn first
        5:   10:TicTacToeBoard::TicTacToeBoard()
        -:   11:{
        5:   12:  turn = X;
       20:   13:  for(int i=0; i<BOARDSIZE; i++)
       60:   14:    for(int j=0; j<BOARDSIZE; j++)
       45:   15:      board[i][j] = Blank;
        5:   16:}
        -:   17:
        -:   18:/**
        -:   19: * Switches turn member variable to represent whether it's X's or O's turn
        -:   20: * and returns whose turn it is
        -:   21:**/
        4:   22:Piece TicTacToeBoard::toggleTurn()
        -:   23:{
        4:   24:  if (turn == X)
        3:   25:    turn = O;
        -:   26:  
        1:   27:  else if (turn == O)
        1:   28:    turn = X;
        -:   29:  
        -:   30:  else
    #####:   31:    return Invalid; //should never reach here.
        -:   32:    
        4:   33:  return turn;
        -:   34:}
        -:   35:
        -:   36:/**
        -:   37: * Places the piece of the current turn on the board, returns what
        -:   38: * piece is placed, and toggles which Piece's turn it is. placePiece does 
        -:   39: * NOT allow to place a piece in a location where there is already a piece.
        -:   40: * In that case, placePiece just returns what is already at that location. 
        -:   41: * Out of bounds coordinates return the Piece Invalid value. When the game
        -:   42: * is over, no more pieces can be placed so attempting to place a piece
        -:   43: * should neither change the board nor change whose turn it is.
        -:   44:**/ 
        6:   45:Piece TicTacToeBoard::placePiece(int row, int column)
        -:   46:{
        6:   47:  Piece gameOver = getWinner();
        -:   48:  
        6:   49:  if (gameOver == Blank)
    #####:   50:    return getPiece(row, column);
        -:   51:  
        -:   52:  // Out of bounds
        6:   53:  if( row >= BOARDSIZE || row < 0 || column >= BOARDSIZE || column < 0)
        1:   54:    return Invalid;
        -:   55:    
        5:   56:  if(getPiece(row, column) != Blank)
        1:   57:    return getPiece(row, column);
        -:   58:    
        4:   59:  board[row][column] = turn;
        4:   60:  toggleTurn();
        -:   61:  
        4:   62:  return board[row][column];
        -:   63:}
        -:   64:
        -:   65:/**
        -:   66: * Returns what piece is at the provided coordinates, or Blank if there
        -:   67: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   68:**/
      372:   69:Piece TicTacToeBoard::getPiece(int row, int column)
        -:   70:{
        -:   71:  // Out of bounds
      372:   72:  if( row >= BOARDSIZE || row < 0 || column >= BOARDSIZE || column < 0)
       49:   73:    return Invalid;
        -:   74:  
      323:   75:  return board[row][column];
        -:   76:}
        -:   77:
        -:   78:/**
        -:   79: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:   80: * is not over, or Blank if the board is filled and no one has won.
        -:   81:**/
        6:   82:Piece TicTacToeBoard::getWinner()
        -:   83:{
        6:   84:  int counter = 0;
        -:   85:  Piece cur;
        6:   86:  bool unfinished=false;
        -:   87:  
        -:   88:  // Check Rows
       16:   89:  for(int i=0, counter=0; i<BOARDSIZE && counter != 3; i++){
       40:   90:    for(int j=0; j<BOARDSIZE; j++){
       30:   91:      if (getPiece(i,j) == Blank)
       28:   92:        unfinished=true;
        -:   93:      
       30:   94:      if (j>0 && getPiece(i,j) != getPiece(i,j-1))
        2:   95:        counter = 0;
        -:   96:      else  
       28:   97:        counter++;
       30:   98:      cur = getPiece(i,j);
        -:   99:    }
        -:  100:  }
        -:  101:  
        -:  102:  // Check Columns
       16:  103:  for(int j=0, counter=0; j<BOARDSIZE  && counter != 3; j++){
       40:  104:    for(int i=0; i<BOARDSIZE; i++){
       30:  105:      if (getPiece(i,j) == Blank)
       28:  106:        unfinished=true;
        -:  107:      
       30:  108:      if (i>0 && getPiece(i,j) != getPiece(i-1,j))
        2:  109:        counter = 0;
        -:  110:      else  
       28:  111:        counter++;
       30:  112:      cur = getPiece(i,j);
        -:  113:    }
        -:  114:  }
        -:  115:  
        -:  116:  // Check Diagonal 1
       32:  117:  for(int i=0, counter=0; i<BOARDSIZE  || counter != 3; i++){
       26:  118:    if (getPiece(i,i) == Blank)
       16:  119:      unfinished=true;
        -:  120:    
       26:  121:    if (i>0 && getPiece(i,i) != getPiece(i-1,i-1))
        4:  122:      counter = 0;
        -:  123:    else  
       22:  124:      counter++;
       26:  125:    cur = getPiece(i,i);
        -:  126:  }
        -:  127:  
        -:  128:  // Check Diagonal 2
       30:  129:  for(int i=BOARDSIZE-1, counter=0; i>=0  || counter != 3; i--){
       24:  130:    if (getPiece(i,i) == Blank)
       16:  131:      unfinished=true;
        -:  132:    
       24:  133:    if (i>0 && getPiece(i,i) != getPiece(i+1,i+1))
        6:  134:      counter = 0;
        -:  135:    else  
       18:  136:      counter++;
       24:  137:    cur = getPiece(i,i);
        -:  138:  }
        -:  139:  
        6:  140:  if (counter == 3)
    #####:  141:    return cur;
        6:  142:  else if (unfinished == true)
        6:  143:    return Invalid;
        -:  144:  else
    #####:  145:    return Blank;
        -:  146:  
        3:  147:}
